1A:
a, b, c

1B:
it is difficult to get the consistency and atomicity in a distributed system
as data may not be the same on all nodes, in case of errors.

2A:
b, c

2B:
Spark can take advantage of being a main-memory system, and this can work in this case,
because we have a lot of memory, so we can hold a lot of data at a time.

3
3.1:
id, pid, sid -> mid
pid -> pn
sid -> sn
mid -> mn

3.2:
Ids(id, pid, sid, mid)
Where the primary is (id, sid, pid)

P(pid, pn)
Where pid is the primary key

S(sid, sn)
Where sid is the primary key

M(mid, mn)
Where mid is the key

3.3:
drop table if exists Ids cascade;
create table Ids (
	id int not null,
	pid int not null,
	sid int not null,
	mid int not null,
	primary key(id, pid, sid),
	foreign key (pid) references P(pid),
	foreign key (sid) references S(sid),
	foreign key (mid) references M(mid)
);
insert into Ids
select id, pid, sid, mid
from projects
on conflict do nothing;

drop table if exists P cascade;
create table P (
	pid int primary key not null,
	pn varchar(50) not null
);
insert into P
select pid, pn
from projects
on conflict do nothing;

drop table if exists S cascade;
create table S (
	sid int primary key not null,
	sn varchar(50) not null
);
insert into s
select sid, sn
from projects
on conflict do nothing;

drop table if exists M cascade;
create table M (
	mid int primary key not null,
	mn varchar(50) not null
);
insert into m
select mid, mn
from projects
on conflict do nothing;

3.4:
BCNF
